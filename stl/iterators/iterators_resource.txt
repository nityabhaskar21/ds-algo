STL CONTAINER   ITERATOR SUPPORTED

Vector          Random-Access
List            Bidirectional
Dequeue         Random-Access
Map             Bidirectional
Multimap        Bidirectional
Set             Bidirectional
Multiset        Bidirectional
Stack           Does not support any iterator
Queue           Does not support any iterator
Priority-Queue  Does not support any iterator


An iterator can be categorized in the following ways:

Input Iterator
Output Iterator
Forward Iterator
Bidirectional Iterator
Random Access Iterator


Input Iterator: An input iterator is an iterator used to access the elements from the container, 
but it does not modify the value of a container.
Operators used for an input iterator are:
    Increment operator(++)
    Equal operator(==)
    Not equal operator(!=)
    Dereference operator(*)


Output Iterator: An output iterator is an iterator used to modify the value of a container, 
but it does not read the value from a container. 
Therefore, we can say that an output iterator is a write-only iterator.
Operators used for an output iterator are:
    Increment operator(++)
    Assignment operator(=)


Forward Iterator: A forward iterator is an iterator used to read and write to a container. 
It is a multi-pass iterator.
Operators used for a Forward iterator are:
    Increment operator(++)
    Assignment operator(=)
    Equal operator(=)
    Not equal operator(!=)


Bidirectional iterator: A bidirectional iterator is an iterator supports all the features 
of a forward iterator plus it adds one more feature, i.e., decrement operator(--). 
We can move backward by decrementing an iterator.
Operators used for a Bidirectional iterator are:
    Increment operator(++)
    Assignment operator(=)
    Equal operator(=)
    Not equal operator(!=)
    Decrement operator(--)


Random Access Iterator: A Random Access iterator is an iterator provides random access 
of an element at an arbitrary location. 
It has all the features of a bidirectional iterator plus it adds one more feature, 
i.e., pointer addition and pointer subtraction to provide random access to an element.
like: it= it+2, it= it-1;


Operations of iterators :-

1. begin() :- This function is used to return the beginning position of the container.

2. end() :- This function is used to return the after end position of the container.

3. advance(it, n) :- This function is used to increment the iterator position(it) 
                till the specified number(n) mentioned in its arguments.

4. next(it, n) :- This function returns the new iterator that the iterator would point 
             after advancing the positions mentioned in its arguments.

5. prev(it, n) :- This function returns the new iterator that the iterator would point 
             after decrementing the positions mentioned in its arguments.

6. distance(first, last) :- This function returns the number of elements between first and last iterators.