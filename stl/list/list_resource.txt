In C++, the std::list refers to a storage container. 
The std:list allows you to insert and remove items from anywhere. 
The std::list is implemented as a doubly-linked list. 
This means list data can be accessed bi-directionally and sequentially.

The Standard Template Library list doesn’t support fast random access, 
but it supports sequential access from all directions.

C++ List Functions
Here are the common std::list functions:

Function	        Description
insert()	        This function inserts a new item before the position the iterator points.
push_back()	        This functions add a new item at the list’s end.
push_front()	    It adds a new item at the list’s front.
pop_front()	        It deletes the list’s first item.
size()	            This function determines the number of list elements.
front()	            To determines the list’s first items.
back()	            To determines the list’s last item.
reverse()	        It reverses the list items.
merge()	            It merges two sorted lists.


Differences between list and deque:-
Deque manages its elements with a dynamic array, provides random access, and has almost the same interface as a vector.
List manages its elements as a doubly linked list and does not provide random access.

Deque provides Fast insertions and deletions at both the end and the beginning. 
        Inserting and deleting elements in the middle is relatively slow 
        because all elements up to either of both ends may be moved to make room or to fill a gap.
In List, inserting and removing elements is fast at each position, including both ends.

Deque: Any insertion or deletion of elements other than at the beginning or end invalidates all pointers, references, 
        and iterators that refer to elements of the deque.
List: Inserting and deleting elements does not invalidate pointers, references, and iterators to other elements.